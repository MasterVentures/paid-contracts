/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface AgreementInterface extends ethers.utils.Interface {
  functions: {
    "SetExpiredSA(uint256)": FunctionFragment;
    "SetExpiredToSign(uint256)": FunctionFragment;
    "addWhitelisted(uint32,uint8,address[])": FunctionFragment;
    "agreements(uint256)": FunctionFragment;
    "create(address,uint32,uint32,uint32,string,bytes32,bytes32,bytes32)": FunctionFragment;
    "declined(address,uint32,string,bytes32,bytes32)": FunctionFragment;
    "getAgreementByParty(address)": FunctionFragment;
    "getAgreementByPeer(address,address)": FunctionFragment;
    "getPayment()": FunctionFragment;
    "getPeerSigner(uint32,address)": FunctionFragment;
    "getRecipient()": FunctionFragment;
    "hasValidSA(uint256)": FunctionFragment;
    "hasValidToSign(uint256)": FunctionFragment;
    "iscompleted(uint32)": FunctionFragment;
    "owner()": FunctionFragment;
    "pendingSign(address,uint32,uint32,uint32,string,bytes32,bytes32)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setAgreementTemplate(bytes32,bytes)": FunctionFragment;
    "setPayment(uint256)": FunctionFragment;
    "setRecipient(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "whiteListed(uint32,address,uint8)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "SetExpiredSA",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "SetExpiredToSign",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addWhitelisted",
    values: [BigNumberish, BigNumberish, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "agreements",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "create",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      BytesLike,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "declined",
    values: [string, BigNumberish, string, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAgreementByParty",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAgreementByPeer",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPayment",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPeerSigner",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getRecipient",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hasValidSA",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hasValidToSign",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "iscompleted",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingSign",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAgreementTemplate",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setPayment",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRecipient",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "whiteListed",
    values: [BigNumberish, string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "SetExpiredSA",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SetExpiredToSign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addWhitelisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "agreements", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "create", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "declined", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAgreementByParty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAgreementByPeer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPayment", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPeerSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasValidSA", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hasValidToSign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "iscompleted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingSign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAgreementTemplate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPayment", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whiteListed",
    data: BytesLike
  ): Result;

  events: {
    "AgreementEvents(uint256,bytes32,address,address,string,uint256)": EventFragment;
    "ChangePaymentEvents(uint256,uint256,address)": EventFragment;
    "ChangeRecipientEvents(address,address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PaymentEvents(uint256,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AgreementEvents"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangePaymentEvents"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangeRecipientEvents"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PaymentEvents"): EventFragment;
}

export class Agreement extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: AgreementInterface;

  functions: {
    SetExpiredSA(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "SetExpiredSA(uint256)"(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    SetExpiredToSign(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "SetExpiredToSign(uint256)"(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addWhitelisted(
      agreementId: BigNumberish,
      amountSigner: BigNumberish,
      _addresses: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addWhitelisted(uint32,uint8,address[])"(
      agreementId: BigNumberish,
      amountSigner: BigNumberish,
      _addresses: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    agreements(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        boolean,
        number,
        number,
        number,
        number,
        number,
        number,
        [string] & { signatory: string },
        string,
        string,
        [string, string] & { multiaddressReference: string; digest: string }
      ] & {
        escrowed: boolean;
        peersSigned: boolean;
        status: number;
        amountSigner: number;
        created_at: number;
        updated_at: number;
        validUntilSign: number;
        validUntilSA: number;
        createSigner: [string] & { signatory: string };
        agreementForm: string;
        agreementFormTemplateId: string;
        file: [string, string] & {
          multiaddressReference: string;
          digest: string;
        };
      }
    >;

    "agreements(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        boolean,
        number,
        number,
        number,
        number,
        number,
        number,
        [string] & { signatory: string },
        string,
        string,
        [string, string] & { multiaddressReference: string; digest: string }
      ] & {
        escrowed: boolean;
        peersSigned: boolean;
        status: number;
        amountSigner: number;
        created_at: number;
        updated_at: number;
        validUntilSign: number;
        validUntilSA: number;
        createSigner: [string] & { signatory: string };
        agreementForm: string;
        agreementFormTemplateId: string;
        file: [string, string] & {
          multiaddressReference: string;
          digest: string;
        };
      }
    >;

    create(
      token: string,
      validUntilSign: BigNumberish,
      validUntilSA: BigNumberish,
      amountSigner: BigNumberish,
      multiaddrReference: string,
      agreementFormTemplateId: BytesLike,
      agreementForm: BytesLike,
      digest: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "create(address,uint32,uint32,uint32,string,bytes32,bytes32,bytes32)"(
      token: string,
      validUntilSign: BigNumberish,
      validUntilSA: BigNumberish,
      amountSigner: BigNumberish,
      multiaddrReference: string,
      agreementFormTemplateId: BytesLike,
      agreementForm: BytesLike,
      digest: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    declined(
      token: string,
      agreementId: BigNumberish,
      multiaddrReference: string,
      agreementForm: BytesLike,
      digest: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "declined(address,uint32,string,bytes32,bytes32)"(
      token: string,
      agreementId: BigNumberish,
      multiaddrReference: string,
      agreementForm: BytesLike,
      digest: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAgreementByParty(
      _party: string,
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          boolean,
          boolean,
          number,
          number,
          number,
          number,
          number,
          number,
          [string] & { signatory: string },
          string,
          string,
          [string, string] & { multiaddressReference: string; digest: string }
        ] & {
          escrowed: boolean;
          peersSigned: boolean;
          status: number;
          amountSigner: number;
          created_at: number;
          updated_at: number;
          validUntilSign: number;
          validUntilSA: number;
          createSigner: [string] & { signatory: string };
          agreementForm: string;
          agreementFormTemplateId: string;
          file: [string, string] & {
            multiaddressReference: string;
            digest: string;
          };
        })[]
      ] & {
        smartagree: ([
          boolean,
          boolean,
          number,
          number,
          number,
          number,
          number,
          number,
          [string] & { signatory: string },
          string,
          string,
          [string, string] & { multiaddressReference: string; digest: string }
        ] & {
          escrowed: boolean;
          peersSigned: boolean;
          status: number;
          amountSigner: number;
          created_at: number;
          updated_at: number;
          validUntilSign: number;
          validUntilSA: number;
          createSigner: [string] & { signatory: string };
          agreementForm: string;
          agreementFormTemplateId: string;
          file: [string, string] & {
            multiaddressReference: string;
            digest: string;
          };
        })[];
      }
    >;

    "getAgreementByParty(address)"(
      _party: string,
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          boolean,
          boolean,
          number,
          number,
          number,
          number,
          number,
          number,
          [string] & { signatory: string },
          string,
          string,
          [string, string] & { multiaddressReference: string; digest: string }
        ] & {
          escrowed: boolean;
          peersSigned: boolean;
          status: number;
          amountSigner: number;
          created_at: number;
          updated_at: number;
          validUntilSign: number;
          validUntilSA: number;
          createSigner: [string] & { signatory: string };
          agreementForm: string;
          agreementFormTemplateId: string;
          file: [string, string] & {
            multiaddressReference: string;
            digest: string;
          };
        })[]
      ] & {
        smartagree: ([
          boolean,
          boolean,
          number,
          number,
          number,
          number,
          number,
          number,
          [string] & { signatory: string },
          string,
          string,
          [string, string] & { multiaddressReference: string; digest: string }
        ] & {
          escrowed: boolean;
          peersSigned: boolean;
          status: number;
          amountSigner: number;
          created_at: number;
          updated_at: number;
          validUntilSign: number;
          validUntilSA: number;
          createSigner: [string] & { signatory: string };
          agreementForm: string;
          agreementFormTemplateId: string;
          file: [string, string] & {
            multiaddressReference: string;
            digest: string;
          };
        })[];
      }
    >;

    getAgreementByPeer(
      _party: string,
      _peer: string,
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          boolean,
          boolean,
          number,
          number,
          number,
          number,
          number,
          number,
          [string] & { signatory: string },
          string,
          string,
          [string, string] & { multiaddressReference: string; digest: string }
        ] & {
          escrowed: boolean;
          peersSigned: boolean;
          status: number;
          amountSigner: number;
          created_at: number;
          updated_at: number;
          validUntilSign: number;
          validUntilSA: number;
          createSigner: [string] & { signatory: string };
          agreementForm: string;
          agreementFormTemplateId: string;
          file: [string, string] & {
            multiaddressReference: string;
            digest: string;
          };
        })[]
      ] & {
        Agreements: ([
          boolean,
          boolean,
          number,
          number,
          number,
          number,
          number,
          number,
          [string] & { signatory: string },
          string,
          string,
          [string, string] & { multiaddressReference: string; digest: string }
        ] & {
          escrowed: boolean;
          peersSigned: boolean;
          status: number;
          amountSigner: number;
          created_at: number;
          updated_at: number;
          validUntilSign: number;
          validUntilSA: number;
          createSigner: [string] & { signatory: string };
          agreementForm: string;
          agreementFormTemplateId: string;
          file: [string, string] & {
            multiaddressReference: string;
            digest: string;
          };
        })[];
      }
    >;

    "getAgreementByPeer(address,address)"(
      _party: string,
      _peer: string,
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          boolean,
          boolean,
          number,
          number,
          number,
          number,
          number,
          number,
          [string] & { signatory: string },
          string,
          string,
          [string, string] & { multiaddressReference: string; digest: string }
        ] & {
          escrowed: boolean;
          peersSigned: boolean;
          status: number;
          amountSigner: number;
          created_at: number;
          updated_at: number;
          validUntilSign: number;
          validUntilSA: number;
          createSigner: [string] & { signatory: string };
          agreementForm: string;
          agreementFormTemplateId: string;
          file: [string, string] & {
            multiaddressReference: string;
            digest: string;
          };
        })[]
      ] & {
        Agreements: ([
          boolean,
          boolean,
          number,
          number,
          number,
          number,
          number,
          number,
          [string] & { signatory: string },
          string,
          string,
          [string, string] & { multiaddressReference: string; digest: string }
        ] & {
          escrowed: boolean;
          peersSigned: boolean;
          status: number;
          amountSigner: number;
          created_at: number;
          updated_at: number;
          validUntilSign: number;
          validUntilSA: number;
          createSigner: [string] & { signatory: string };
          agreementForm: string;
          agreementFormTemplateId: string;
          file: [string, string] & {
            multiaddressReference: string;
            digest: string;
          };
        })[];
      }
    >;

    getPayment(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getPayment()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPeerSigner(
      _agreementId: BigNumberish,
      _counterParty: string,
      overrides?: CallOverrides
    ): Promise<[number]>;

    "getPeerSigner(uint32,address)"(
      _agreementId: BigNumberish,
      _counterParty: string,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getRecipient(overrides?: CallOverrides): Promise<[string]>;

    "getRecipient()"(overrides?: CallOverrides): Promise<[string]>;

    hasValidSA(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "hasValidSA(uint256)"(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    hasValidToSign(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "hasValidToSign(uint256)"(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    iscompleted(
      _agreementId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "iscompleted(uint32)"(
      _agreementId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    pendingSign(
      token: string,
      agreementId: BigNumberish,
      validUntilSign: BigNumberish,
      validUntilSA: BigNumberish,
      multiaddrReference: string,
      agreementForm: BytesLike,
      digest: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "pendingSign(address,uint32,uint32,uint32,string,bytes32,bytes32)"(
      token: string,
      agreementId: BigNumberish,
      validUntilSign: BigNumberish,
      validUntilSA: BigNumberish,
      multiaddrReference: string,
      agreementForm: BytesLike,
      digest: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAgreementTemplate(
      id: BytesLike,
      content: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setAgreementTemplate(bytes32,bytes)"(
      id: BytesLike,
      content: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPayment(
      payment: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setPayment(uint256)"(
      payment: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRecipient(
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setRecipient(address)"(
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    whiteListed(
      arg0: BigNumberish,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean, boolean, number, [string] & { signatory: string }] & {
        whiteListed: boolean;
        signed: boolean;
        creator: boolean;
        AgreementId: number;
        peerSigner: [string] & { signatory: string };
      }
    >;

    "whiteListed(uint32,address,uint8)"(
      arg0: BigNumberish,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean, boolean, number, [string] & { signatory: string }] & {
        whiteListed: boolean;
        signed: boolean;
        creator: boolean;
        AgreementId: number;
        peerSigner: [string] & { signatory: string };
      }
    >;
  };

  SetExpiredSA(
    _id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "SetExpiredSA(uint256)"(
    _id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  SetExpiredToSign(
    _id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "SetExpiredToSign(uint256)"(
    _id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addWhitelisted(
    agreementId: BigNumberish,
    amountSigner: BigNumberish,
    _addresses: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addWhitelisted(uint32,uint8,address[])"(
    agreementId: BigNumberish,
    amountSigner: BigNumberish,
    _addresses: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  agreements(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      boolean,
      boolean,
      number,
      number,
      number,
      number,
      number,
      number,
      [string] & { signatory: string },
      string,
      string,
      [string, string] & { multiaddressReference: string; digest: string }
    ] & {
      escrowed: boolean;
      peersSigned: boolean;
      status: number;
      amountSigner: number;
      created_at: number;
      updated_at: number;
      validUntilSign: number;
      validUntilSA: number;
      createSigner: [string] & { signatory: string };
      agreementForm: string;
      agreementFormTemplateId: string;
      file: [string, string] & {
        multiaddressReference: string;
        digest: string;
      };
    }
  >;

  "agreements(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      boolean,
      boolean,
      number,
      number,
      number,
      number,
      number,
      number,
      [string] & { signatory: string },
      string,
      string,
      [string, string] & { multiaddressReference: string; digest: string }
    ] & {
      escrowed: boolean;
      peersSigned: boolean;
      status: number;
      amountSigner: number;
      created_at: number;
      updated_at: number;
      validUntilSign: number;
      validUntilSA: number;
      createSigner: [string] & { signatory: string };
      agreementForm: string;
      agreementFormTemplateId: string;
      file: [string, string] & {
        multiaddressReference: string;
        digest: string;
      };
    }
  >;

  create(
    token: string,
    validUntilSign: BigNumberish,
    validUntilSA: BigNumberish,
    amountSigner: BigNumberish,
    multiaddrReference: string,
    agreementFormTemplateId: BytesLike,
    agreementForm: BytesLike,
    digest: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "create(address,uint32,uint32,uint32,string,bytes32,bytes32,bytes32)"(
    token: string,
    validUntilSign: BigNumberish,
    validUntilSA: BigNumberish,
    amountSigner: BigNumberish,
    multiaddrReference: string,
    agreementFormTemplateId: BytesLike,
    agreementForm: BytesLike,
    digest: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  declined(
    token: string,
    agreementId: BigNumberish,
    multiaddrReference: string,
    agreementForm: BytesLike,
    digest: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "declined(address,uint32,string,bytes32,bytes32)"(
    token: string,
    agreementId: BigNumberish,
    multiaddrReference: string,
    agreementForm: BytesLike,
    digest: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAgreementByParty(
    _party: string,
    overrides?: CallOverrides
  ): Promise<
    ([
      boolean,
      boolean,
      number,
      number,
      number,
      number,
      number,
      number,
      [string] & { signatory: string },
      string,
      string,
      [string, string] & { multiaddressReference: string; digest: string }
    ] & {
      escrowed: boolean;
      peersSigned: boolean;
      status: number;
      amountSigner: number;
      created_at: number;
      updated_at: number;
      validUntilSign: number;
      validUntilSA: number;
      createSigner: [string] & { signatory: string };
      agreementForm: string;
      agreementFormTemplateId: string;
      file: [string, string] & {
        multiaddressReference: string;
        digest: string;
      };
    })[]
  >;

  "getAgreementByParty(address)"(
    _party: string,
    overrides?: CallOverrides
  ): Promise<
    ([
      boolean,
      boolean,
      number,
      number,
      number,
      number,
      number,
      number,
      [string] & { signatory: string },
      string,
      string,
      [string, string] & { multiaddressReference: string; digest: string }
    ] & {
      escrowed: boolean;
      peersSigned: boolean;
      status: number;
      amountSigner: number;
      created_at: number;
      updated_at: number;
      validUntilSign: number;
      validUntilSA: number;
      createSigner: [string] & { signatory: string };
      agreementForm: string;
      agreementFormTemplateId: string;
      file: [string, string] & {
        multiaddressReference: string;
        digest: string;
      };
    })[]
  >;

  getAgreementByPeer(
    _party: string,
    _peer: string,
    overrides?: CallOverrides
  ): Promise<
    ([
      boolean,
      boolean,
      number,
      number,
      number,
      number,
      number,
      number,
      [string] & { signatory: string },
      string,
      string,
      [string, string] & { multiaddressReference: string; digest: string }
    ] & {
      escrowed: boolean;
      peersSigned: boolean;
      status: number;
      amountSigner: number;
      created_at: number;
      updated_at: number;
      validUntilSign: number;
      validUntilSA: number;
      createSigner: [string] & { signatory: string };
      agreementForm: string;
      agreementFormTemplateId: string;
      file: [string, string] & {
        multiaddressReference: string;
        digest: string;
      };
    })[]
  >;

  "getAgreementByPeer(address,address)"(
    _party: string,
    _peer: string,
    overrides?: CallOverrides
  ): Promise<
    ([
      boolean,
      boolean,
      number,
      number,
      number,
      number,
      number,
      number,
      [string] & { signatory: string },
      string,
      string,
      [string, string] & { multiaddressReference: string; digest: string }
    ] & {
      escrowed: boolean;
      peersSigned: boolean;
      status: number;
      amountSigner: number;
      created_at: number;
      updated_at: number;
      validUntilSign: number;
      validUntilSA: number;
      createSigner: [string] & { signatory: string };
      agreementForm: string;
      agreementFormTemplateId: string;
      file: [string, string] & {
        multiaddressReference: string;
        digest: string;
      };
    })[]
  >;

  getPayment(overrides?: CallOverrides): Promise<BigNumber>;

  "getPayment()"(overrides?: CallOverrides): Promise<BigNumber>;

  getPeerSigner(
    _agreementId: BigNumberish,
    _counterParty: string,
    overrides?: CallOverrides
  ): Promise<number>;

  "getPeerSigner(uint32,address)"(
    _agreementId: BigNumberish,
    _counterParty: string,
    overrides?: CallOverrides
  ): Promise<number>;

  getRecipient(overrides?: CallOverrides): Promise<string>;

  "getRecipient()"(overrides?: CallOverrides): Promise<string>;

  hasValidSA(_id: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  "hasValidSA(uint256)"(
    _id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  hasValidToSign(
    _id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "hasValidToSign(uint256)"(
    _id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  iscompleted(
    _agreementId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "iscompleted(uint32)"(
    _agreementId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  pendingSign(
    token: string,
    agreementId: BigNumberish,
    validUntilSign: BigNumberish,
    validUntilSA: BigNumberish,
    multiaddrReference: string,
    agreementForm: BytesLike,
    digest: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "pendingSign(address,uint32,uint32,uint32,string,bytes32,bytes32)"(
    token: string,
    agreementId: BigNumberish,
    validUntilSign: BigNumberish,
    validUntilSA: BigNumberish,
    multiaddrReference: string,
    agreementForm: BytesLike,
    digest: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "renounceOwnership()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAgreementTemplate(
    id: BytesLike,
    content: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setAgreementTemplate(bytes32,bytes)"(
    id: BytesLike,
    content: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPayment(
    payment: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setPayment(uint256)"(
    payment: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRecipient(
    recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setRecipient(address)"(
    recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  whiteListed(
    arg0: BigNumberish,
    arg1: string,
    arg2: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [boolean, boolean, boolean, number, [string] & { signatory: string }] & {
      whiteListed: boolean;
      signed: boolean;
      creator: boolean;
      AgreementId: number;
      peerSigner: [string] & { signatory: string };
    }
  >;

  "whiteListed(uint32,address,uint8)"(
    arg0: BigNumberish,
    arg1: string,
    arg2: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [boolean, boolean, boolean, number, [string] & { signatory: string }] & {
      whiteListed: boolean;
      signed: boolean;
      creator: boolean;
      AgreementId: number;
      peerSigner: [string] & { signatory: string };
    }
  >;

  callStatic: {
    SetExpiredSA(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "SetExpiredSA(uint256)"(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    SetExpiredToSign(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "SetExpiredToSign(uint256)"(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    addWhitelisted(
      agreementId: BigNumberish,
      amountSigner: BigNumberish,
      _addresses: string[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    "addWhitelisted(uint32,uint8,address[])"(
      agreementId: BigNumberish,
      amountSigner: BigNumberish,
      _addresses: string[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    agreements(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        boolean,
        number,
        number,
        number,
        number,
        number,
        number,
        [string] & { signatory: string },
        string,
        string,
        [string, string] & { multiaddressReference: string; digest: string }
      ] & {
        escrowed: boolean;
        peersSigned: boolean;
        status: number;
        amountSigner: number;
        created_at: number;
        updated_at: number;
        validUntilSign: number;
        validUntilSA: number;
        createSigner: [string] & { signatory: string };
        agreementForm: string;
        agreementFormTemplateId: string;
        file: [string, string] & {
          multiaddressReference: string;
          digest: string;
        };
      }
    >;

    "agreements(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        boolean,
        number,
        number,
        number,
        number,
        number,
        number,
        [string] & { signatory: string },
        string,
        string,
        [string, string] & { multiaddressReference: string; digest: string }
      ] & {
        escrowed: boolean;
        peersSigned: boolean;
        status: number;
        amountSigner: number;
        created_at: number;
        updated_at: number;
        validUntilSign: number;
        validUntilSA: number;
        createSigner: [string] & { signatory: string };
        agreementForm: string;
        agreementFormTemplateId: string;
        file: [string, string] & {
          multiaddressReference: string;
          digest: string;
        };
      }
    >;

    create(
      token: string,
      validUntilSign: BigNumberish,
      validUntilSA: BigNumberish,
      amountSigner: BigNumberish,
      multiaddrReference: string,
      agreementFormTemplateId: BytesLike,
      agreementForm: BytesLike,
      digest: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "create(address,uint32,uint32,uint32,string,bytes32,bytes32,bytes32)"(
      token: string,
      validUntilSign: BigNumberish,
      validUntilSA: BigNumberish,
      amountSigner: BigNumberish,
      multiaddrReference: string,
      agreementFormTemplateId: BytesLike,
      agreementForm: BytesLike,
      digest: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    declined(
      token: string,
      agreementId: BigNumberish,
      multiaddrReference: string,
      agreementForm: BytesLike,
      digest: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "declined(address,uint32,string,bytes32,bytes32)"(
      token: string,
      agreementId: BigNumberish,
      multiaddrReference: string,
      agreementForm: BytesLike,
      digest: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAgreementByParty(
      _party: string,
      overrides?: CallOverrides
    ): Promise<
      ([
        boolean,
        boolean,
        number,
        number,
        number,
        number,
        number,
        number,
        [string] & { signatory: string },
        string,
        string,
        [string, string] & { multiaddressReference: string; digest: string }
      ] & {
        escrowed: boolean;
        peersSigned: boolean;
        status: number;
        amountSigner: number;
        created_at: number;
        updated_at: number;
        validUntilSign: number;
        validUntilSA: number;
        createSigner: [string] & { signatory: string };
        agreementForm: string;
        agreementFormTemplateId: string;
        file: [string, string] & {
          multiaddressReference: string;
          digest: string;
        };
      })[]
    >;

    "getAgreementByParty(address)"(
      _party: string,
      overrides?: CallOverrides
    ): Promise<
      ([
        boolean,
        boolean,
        number,
        number,
        number,
        number,
        number,
        number,
        [string] & { signatory: string },
        string,
        string,
        [string, string] & { multiaddressReference: string; digest: string }
      ] & {
        escrowed: boolean;
        peersSigned: boolean;
        status: number;
        amountSigner: number;
        created_at: number;
        updated_at: number;
        validUntilSign: number;
        validUntilSA: number;
        createSigner: [string] & { signatory: string };
        agreementForm: string;
        agreementFormTemplateId: string;
        file: [string, string] & {
          multiaddressReference: string;
          digest: string;
        };
      })[]
    >;

    getAgreementByPeer(
      _party: string,
      _peer: string,
      overrides?: CallOverrides
    ): Promise<
      ([
        boolean,
        boolean,
        number,
        number,
        number,
        number,
        number,
        number,
        [string] & { signatory: string },
        string,
        string,
        [string, string] & { multiaddressReference: string; digest: string }
      ] & {
        escrowed: boolean;
        peersSigned: boolean;
        status: number;
        amountSigner: number;
        created_at: number;
        updated_at: number;
        validUntilSign: number;
        validUntilSA: number;
        createSigner: [string] & { signatory: string };
        agreementForm: string;
        agreementFormTemplateId: string;
        file: [string, string] & {
          multiaddressReference: string;
          digest: string;
        };
      })[]
    >;

    "getAgreementByPeer(address,address)"(
      _party: string,
      _peer: string,
      overrides?: CallOverrides
    ): Promise<
      ([
        boolean,
        boolean,
        number,
        number,
        number,
        number,
        number,
        number,
        [string] & { signatory: string },
        string,
        string,
        [string, string] & { multiaddressReference: string; digest: string }
      ] & {
        escrowed: boolean;
        peersSigned: boolean;
        status: number;
        amountSigner: number;
        created_at: number;
        updated_at: number;
        validUntilSign: number;
        validUntilSA: number;
        createSigner: [string] & { signatory: string };
        agreementForm: string;
        agreementFormTemplateId: string;
        file: [string, string] & {
          multiaddressReference: string;
          digest: string;
        };
      })[]
    >;

    getPayment(overrides?: CallOverrides): Promise<BigNumber>;

    "getPayment()"(overrides?: CallOverrides): Promise<BigNumber>;

    getPeerSigner(
      _agreementId: BigNumberish,
      _counterParty: string,
      overrides?: CallOverrides
    ): Promise<number>;

    "getPeerSigner(uint32,address)"(
      _agreementId: BigNumberish,
      _counterParty: string,
      overrides?: CallOverrides
    ): Promise<number>;

    getRecipient(overrides?: CallOverrides): Promise<string>;

    "getRecipient()"(overrides?: CallOverrides): Promise<string>;

    hasValidSA(_id: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    "hasValidSA(uint256)"(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    hasValidToSign(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "hasValidToSign(uint256)"(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    iscompleted(
      _agreementId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "iscompleted(uint32)"(
      _agreementId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    pendingSign(
      token: string,
      agreementId: BigNumberish,
      validUntilSign: BigNumberish,
      validUntilSA: BigNumberish,
      multiaddrReference: string,
      agreementForm: BytesLike,
      digest: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "pendingSign(address,uint32,uint32,uint32,string,bytes32,bytes32)"(
      token: string,
      agreementId: BigNumberish,
      validUntilSign: BigNumberish,
      validUntilSA: BigNumberish,
      multiaddrReference: string,
      agreementForm: BytesLike,
      digest: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    setAgreementTemplate(
      id: BytesLike,
      content: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "setAgreementTemplate(bytes32,bytes)"(
      id: BytesLike,
      content: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setPayment(
      payment: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "setPayment(uint256)"(
      payment: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setRecipient(
      recipient: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "setRecipient(address)"(
      recipient: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    whiteListed(
      arg0: BigNumberish,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean, boolean, number, [string] & { signatory: string }] & {
        whiteListed: boolean;
        signed: boolean;
        creator: boolean;
        AgreementId: number;
        peerSigner: [string] & { signatory: string };
      }
    >;

    "whiteListed(uint32,address,uint8)"(
      arg0: BigNumberish,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean, boolean, number, [string] & { signatory: string }] & {
        whiteListed: boolean;
        signed: boolean;
        creator: boolean;
        AgreementId: number;
        peerSigner: [string] & { signatory: string };
      }
    >;
  };

  filters: {
    AgreementEvents(
      id: BigNumberish | null,
      formTemplateId: null,
      partySource: string | null,
      partyDestination: string | null,
      agreementStoredReference: null,
      status: null
    ): TypedEventFilter<
      [BigNumber, string, string, string, string, BigNumber],
      {
        id: BigNumber;
        formTemplateId: string;
        partySource: string;
        partyDestination: string;
        agreementStoredReference: string;
        status: BigNumber;
      }
    >;

    ChangePaymentEvents(
      oldPayment: null,
      newPayment: null,
      owner: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, string],
      { oldPayment: BigNumber; newPayment: BigNumber; owner: string }
    >;

    ChangeRecipientEvents(
      oldRecipient: null,
      newRecipient: null,
      owner: null
    ): TypedEventFilter<
      [string, string, string],
      { oldRecipient: string; newRecipient: string; owner: string }
    >;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    PaymentEvents(
      payments: null,
      sender: null,
      token: null
    ): TypedEventFilter<
      [BigNumber, string, string],
      { payments: BigNumber; sender: string; token: string }
    >;
  };

  estimateGas: {
    SetExpiredSA(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "SetExpiredSA(uint256)"(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    SetExpiredToSign(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "SetExpiredToSign(uint256)"(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addWhitelisted(
      agreementId: BigNumberish,
      amountSigner: BigNumberish,
      _addresses: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addWhitelisted(uint32,uint8,address[])"(
      agreementId: BigNumberish,
      amountSigner: BigNumberish,
      _addresses: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    agreements(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "agreements(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    create(
      token: string,
      validUntilSign: BigNumberish,
      validUntilSA: BigNumberish,
      amountSigner: BigNumberish,
      multiaddrReference: string,
      agreementFormTemplateId: BytesLike,
      agreementForm: BytesLike,
      digest: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "create(address,uint32,uint32,uint32,string,bytes32,bytes32,bytes32)"(
      token: string,
      validUntilSign: BigNumberish,
      validUntilSA: BigNumberish,
      amountSigner: BigNumberish,
      multiaddrReference: string,
      agreementFormTemplateId: BytesLike,
      agreementForm: BytesLike,
      digest: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    declined(
      token: string,
      agreementId: BigNumberish,
      multiaddrReference: string,
      agreementForm: BytesLike,
      digest: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "declined(address,uint32,string,bytes32,bytes32)"(
      token: string,
      agreementId: BigNumberish,
      multiaddrReference: string,
      agreementForm: BytesLike,
      digest: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAgreementByParty(
      _party: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAgreementByParty(address)"(
      _party: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAgreementByPeer(
      _party: string,
      _peer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAgreementByPeer(address,address)"(
      _party: string,
      _peer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPayment(overrides?: CallOverrides): Promise<BigNumber>;

    "getPayment()"(overrides?: CallOverrides): Promise<BigNumber>;

    getPeerSigner(
      _agreementId: BigNumberish,
      _counterParty: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPeerSigner(uint32,address)"(
      _agreementId: BigNumberish,
      _counterParty: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRecipient(overrides?: CallOverrides): Promise<BigNumber>;

    "getRecipient()"(overrides?: CallOverrides): Promise<BigNumber>;

    hasValidSA(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hasValidSA(uint256)"(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasValidToSign(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hasValidToSign(uint256)"(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    iscompleted(
      _agreementId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "iscompleted(uint32)"(
      _agreementId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    pendingSign(
      token: string,
      agreementId: BigNumberish,
      validUntilSign: BigNumberish,
      validUntilSA: BigNumberish,
      multiaddrReference: string,
      agreementForm: BytesLike,
      digest: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "pendingSign(address,uint32,uint32,uint32,string,bytes32,bytes32)"(
      token: string,
      agreementId: BigNumberish,
      validUntilSign: BigNumberish,
      validUntilSA: BigNumberish,
      multiaddrReference: string,
      agreementForm: BytesLike,
      digest: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAgreementTemplate(
      id: BytesLike,
      content: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setAgreementTemplate(bytes32,bytes)"(
      id: BytesLike,
      content: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPayment(
      payment: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setPayment(uint256)"(
      payment: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRecipient(
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setRecipient(address)"(
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    whiteListed(
      arg0: BigNumberish,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "whiteListed(uint32,address,uint8)"(
      arg0: BigNumberish,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    SetExpiredSA(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "SetExpiredSA(uint256)"(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    SetExpiredToSign(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "SetExpiredToSign(uint256)"(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addWhitelisted(
      agreementId: BigNumberish,
      amountSigner: BigNumberish,
      _addresses: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addWhitelisted(uint32,uint8,address[])"(
      agreementId: BigNumberish,
      amountSigner: BigNumberish,
      _addresses: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    agreements(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "agreements(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    create(
      token: string,
      validUntilSign: BigNumberish,
      validUntilSA: BigNumberish,
      amountSigner: BigNumberish,
      multiaddrReference: string,
      agreementFormTemplateId: BytesLike,
      agreementForm: BytesLike,
      digest: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "create(address,uint32,uint32,uint32,string,bytes32,bytes32,bytes32)"(
      token: string,
      validUntilSign: BigNumberish,
      validUntilSA: BigNumberish,
      amountSigner: BigNumberish,
      multiaddrReference: string,
      agreementFormTemplateId: BytesLike,
      agreementForm: BytesLike,
      digest: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    declined(
      token: string,
      agreementId: BigNumberish,
      multiaddrReference: string,
      agreementForm: BytesLike,
      digest: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "declined(address,uint32,string,bytes32,bytes32)"(
      token: string,
      agreementId: BigNumberish,
      multiaddrReference: string,
      agreementForm: BytesLike,
      digest: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAgreementByParty(
      _party: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAgreementByParty(address)"(
      _party: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAgreementByPeer(
      _party: string,
      _peer: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAgreementByPeer(address,address)"(
      _party: string,
      _peer: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPayment(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getPayment()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPeerSigner(
      _agreementId: BigNumberish,
      _counterParty: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPeerSigner(uint32,address)"(
      _agreementId: BigNumberish,
      _counterParty: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRecipient(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getRecipient()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    hasValidSA(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hasValidSA(uint256)"(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasValidToSign(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hasValidToSign(uint256)"(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    iscompleted(
      _agreementId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "iscompleted(uint32)"(
      _agreementId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingSign(
      token: string,
      agreementId: BigNumberish,
      validUntilSign: BigNumberish,
      validUntilSA: BigNumberish,
      multiaddrReference: string,
      agreementForm: BytesLike,
      digest: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "pendingSign(address,uint32,uint32,uint32,string,bytes32,bytes32)"(
      token: string,
      agreementId: BigNumberish,
      validUntilSign: BigNumberish,
      validUntilSA: BigNumberish,
      multiaddrReference: string,
      agreementForm: BytesLike,
      digest: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAgreementTemplate(
      id: BytesLike,
      content: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setAgreementTemplate(bytes32,bytes)"(
      id: BytesLike,
      content: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPayment(
      payment: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setPayment(uint256)"(
      payment: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRecipient(
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setRecipient(address)"(
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    whiteListed(
      arg0: BigNumberish,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "whiteListed(uint32,address,uint8)"(
      arg0: BigNumberish,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
