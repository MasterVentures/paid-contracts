/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface AgreementInterface extends ethers.utils.Interface {
  functions: {
    "agreementForms(address,bytes32)": FunctionFragment;
    "agreements(uint256)": FunctionFragment;
    "counterPartiesReject(address,uint256,uint256,string,bytes32,bytes,bytes)": FunctionFragment;
    "counterPartiesSign(address,uint256,uint256,string,bytes32,bytes,bytes)": FunctionFragment;
    "get(uint256)": FunctionFragment;
    "getBalanceToken(address,address)": FunctionFragment;
    "getFormById(uint256,bool,bytes32)": FunctionFragment;
    "getPayment()": FunctionFragment;
    "getRecipient()": FunctionFragment;
    "has(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "partyCreate(address,uint256,address,string,bytes32,bytes,bytes)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setAgreementTemplate(bytes32,bytes)": FunctionFragment;
    "setPayment(uint256)": FunctionFragment;
    "setRecipient(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "agreementForms",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "agreements",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "counterPartiesReject",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      string,
      BytesLike,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "counterPartiesSign",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      string,
      BytesLike,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(functionFragment: "get", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "getBalanceToken",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getFormById",
    values: [BigNumberish, boolean, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPayment",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRecipient",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "has", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "partyCreate",
    values: [
      string,
      BigNumberish,
      string,
      string,
      BytesLike,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAgreementTemplate",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setPayment",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRecipient",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "agreementForms",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "agreements", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "counterPartiesReject",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "counterPartiesSign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "get", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBalanceToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFormById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPayment", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "has", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "partyCreate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAgreementTemplate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPayment", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "AgreementEvents(uint256,bytes32,address,address,string,uint256)": EventFragment;
    "ChangePaymentEvents(uint256,uint256,address)": EventFragment;
    "ChangeRecipientEvents(address,address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PaymentEvents(uint256,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AgreementEvents"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangePaymentEvents"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangeRecipientEvents"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PaymentEvents"): EventFragment;
}

export class Agreement extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: AgreementInterface;

  functions: {
    agreementForms(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "agreementForms(address,bytes32)"(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    agreements(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [string] & { signatory: string },
        [string] & { signatory: string },
        boolean,
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        [string, string] & { multiaddressReference: string; digest: string }
      ] & {
        fromSigner: [string] & { signatory: string };
        toSigner: [string] & { signatory: string };
        escrowed: boolean;
        validUntil: BigNumber;
        agreementForm: string;
        agreementFormTemplateId: string;
        status: BigNumber;
        created_at: BigNumber;
        updated_at: BigNumber;
        file: [string, string] & {
          multiaddressReference: string;
          digest: string;
        };
      }
    >;

    "agreements(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [string] & { signatory: string },
        [string] & { signatory: string },
        boolean,
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        [string, string] & { multiaddressReference: string; digest: string }
      ] & {
        fromSigner: [string] & { signatory: string };
        toSigner: [string] & { signatory: string };
        escrowed: boolean;
        validUntil: BigNumber;
        agreementForm: string;
        agreementFormTemplateId: string;
        status: BigNumber;
        created_at: BigNumber;
        updated_at: BigNumber;
        file: [string, string] & {
          multiaddressReference: string;
          digest: string;
        };
      }
    >;

    counterPartiesReject(
      token: string,
      agreementId: BigNumberish,
      validUntil: BigNumberish,
      multiaddrReference: string,
      agreementFormTemplateId: BytesLike,
      agreementForm: BytesLike,
      digest: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "counterPartiesReject(address,uint256,uint256,string,bytes32,bytes,bytes)"(
      token: string,
      agreementId: BigNumberish,
      validUntil: BigNumberish,
      multiaddrReference: string,
      agreementFormTemplateId: BytesLike,
      agreementForm: BytesLike,
      digest: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    counterPartiesSign(
      token: string,
      agreementId: BigNumberish,
      validUntil: BigNumberish,
      multiaddrReference: string,
      agreementFormTemplateId: BytesLike,
      agreementForm: BytesLike,
      digest: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "counterPartiesSign(address,uint256,uint256,string,bytes32,bytes,bytes)"(
      token: string,
      agreementId: BigNumberish,
      validUntil: BigNumberish,
      multiaddrReference: string,
      agreementFormTemplateId: BytesLike,
      agreementForm: BytesLike,
      digest: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    get(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          [string] & { signatory: string },
          [string] & { signatory: string },
          boolean,
          BigNumber,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          [string, string] & { multiaddressReference: string; digest: string }
        ] & {
          fromSigner: [string] & { signatory: string };
          toSigner: [string] & { signatory: string };
          escrowed: boolean;
          validUntil: BigNumber;
          agreementForm: string;
          agreementFormTemplateId: string;
          status: BigNumber;
          created_at: BigNumber;
          updated_at: BigNumber;
          file: [string, string] & {
            multiaddressReference: string;
            digest: string;
          };
        }
      ]
    >;

    "get(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          [string] & { signatory: string },
          [string] & { signatory: string },
          boolean,
          BigNumber,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          [string, string] & { multiaddressReference: string; digest: string }
        ] & {
          fromSigner: [string] & { signatory: string };
          toSigner: [string] & { signatory: string };
          escrowed: boolean;
          validUntil: BigNumber;
          agreementForm: string;
          agreementFormTemplateId: string;
          status: BigNumber;
          created_at: BigNumber;
          updated_at: BigNumber;
          file: [string, string] & {
            multiaddressReference: string;
            digest: string;
          };
        }
      ]
    >;

    getBalanceToken(
      token: string,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getBalanceToken(address,address)"(
      token: string,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getFormById(
      agreementId: BigNumberish,
      isCounterparty: boolean,
      formId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getFormById(uint256,bool,bytes32)"(
      agreementId: BigNumberish,
      isCounterparty: boolean,
      formId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getPayment(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getPayment()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getRecipient(overrides?: CallOverrides): Promise<[string]>;

    "getRecipient()"(overrides?: CallOverrides): Promise<[string]>;

    has(id: BigNumberish, overrides?: CallOverrides): Promise<[boolean]>;

    "has(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    partyCreate(
      token: string,
      validUntil: BigNumberish,
      counterparty: string,
      multiaddrReference: string,
      agreementFormTemplateId: BytesLike,
      agreementForm: BytesLike,
      digest: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "partyCreate(address,uint256,address,string,bytes32,bytes,bytes)"(
      token: string,
      validUntil: BigNumberish,
      counterparty: string,
      multiaddrReference: string,
      agreementFormTemplateId: BytesLike,
      agreementForm: BytesLike,
      digest: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAgreementTemplate(
      id: BytesLike,
      content: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setAgreementTemplate(bytes32,bytes)"(
      id: BytesLike,
      content: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPayment(
      payment: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setPayment(uint256)"(
      payment: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRecipient(
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setRecipient(address)"(
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  agreementForms(
    arg0: string,
    arg1: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  "agreementForms(address,bytes32)"(
    arg0: string,
    arg1: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  agreements(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      [string] & { signatory: string },
      [string] & { signatory: string },
      boolean,
      BigNumber,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      [string, string] & { multiaddressReference: string; digest: string }
    ] & {
      fromSigner: [string] & { signatory: string };
      toSigner: [string] & { signatory: string };
      escrowed: boolean;
      validUntil: BigNumber;
      agreementForm: string;
      agreementFormTemplateId: string;
      status: BigNumber;
      created_at: BigNumber;
      updated_at: BigNumber;
      file: [string, string] & {
        multiaddressReference: string;
        digest: string;
      };
    }
  >;

  "agreements(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      [string] & { signatory: string },
      [string] & { signatory: string },
      boolean,
      BigNumber,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      [string, string] & { multiaddressReference: string; digest: string }
    ] & {
      fromSigner: [string] & { signatory: string };
      toSigner: [string] & { signatory: string };
      escrowed: boolean;
      validUntil: BigNumber;
      agreementForm: string;
      agreementFormTemplateId: string;
      status: BigNumber;
      created_at: BigNumber;
      updated_at: BigNumber;
      file: [string, string] & {
        multiaddressReference: string;
        digest: string;
      };
    }
  >;

  counterPartiesReject(
    token: string,
    agreementId: BigNumberish,
    validUntil: BigNumberish,
    multiaddrReference: string,
    agreementFormTemplateId: BytesLike,
    agreementForm: BytesLike,
    digest: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "counterPartiesReject(address,uint256,uint256,string,bytes32,bytes,bytes)"(
    token: string,
    agreementId: BigNumberish,
    validUntil: BigNumberish,
    multiaddrReference: string,
    agreementFormTemplateId: BytesLike,
    agreementForm: BytesLike,
    digest: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  counterPartiesSign(
    token: string,
    agreementId: BigNumberish,
    validUntil: BigNumberish,
    multiaddrReference: string,
    agreementFormTemplateId: BytesLike,
    agreementForm: BytesLike,
    digest: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "counterPartiesSign(address,uint256,uint256,string,bytes32,bytes,bytes)"(
    token: string,
    agreementId: BigNumberish,
    validUntil: BigNumberish,
    multiaddrReference: string,
    agreementFormTemplateId: BytesLike,
    agreementForm: BytesLike,
    digest: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  get(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      [string] & { signatory: string },
      [string] & { signatory: string },
      boolean,
      BigNumber,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      [string, string] & { multiaddressReference: string; digest: string }
    ] & {
      fromSigner: [string] & { signatory: string };
      toSigner: [string] & { signatory: string };
      escrowed: boolean;
      validUntil: BigNumber;
      agreementForm: string;
      agreementFormTemplateId: string;
      status: BigNumber;
      created_at: BigNumber;
      updated_at: BigNumber;
      file: [string, string] & {
        multiaddressReference: string;
        digest: string;
      };
    }
  >;

  "get(uint256)"(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      [string] & { signatory: string },
      [string] & { signatory: string },
      boolean,
      BigNumber,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      [string, string] & { multiaddressReference: string; digest: string }
    ] & {
      fromSigner: [string] & { signatory: string };
      toSigner: [string] & { signatory: string };
      escrowed: boolean;
      validUntil: BigNumber;
      agreementForm: string;
      agreementFormTemplateId: string;
      status: BigNumber;
      created_at: BigNumber;
      updated_at: BigNumber;
      file: [string, string] & {
        multiaddressReference: string;
        digest: string;
      };
    }
  >;

  getBalanceToken(
    token: string,
    recipient: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getBalanceToken(address,address)"(
    token: string,
    recipient: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getFormById(
    agreementId: BigNumberish,
    isCounterparty: boolean,
    formId: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  "getFormById(uint256,bool,bytes32)"(
    agreementId: BigNumberish,
    isCounterparty: boolean,
    formId: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  getPayment(overrides?: CallOverrides): Promise<BigNumber>;

  "getPayment()"(overrides?: CallOverrides): Promise<BigNumber>;

  getRecipient(overrides?: CallOverrides): Promise<string>;

  "getRecipient()"(overrides?: CallOverrides): Promise<string>;

  has(id: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  "has(uint256)"(id: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  partyCreate(
    token: string,
    validUntil: BigNumberish,
    counterparty: string,
    multiaddrReference: string,
    agreementFormTemplateId: BytesLike,
    agreementForm: BytesLike,
    digest: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "partyCreate(address,uint256,address,string,bytes32,bytes,bytes)"(
    token: string,
    validUntil: BigNumberish,
    counterparty: string,
    multiaddrReference: string,
    agreementFormTemplateId: BytesLike,
    agreementForm: BytesLike,
    digest: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "renounceOwnership()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAgreementTemplate(
    id: BytesLike,
    content: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setAgreementTemplate(bytes32,bytes)"(
    id: BytesLike,
    content: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPayment(
    payment: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setPayment(uint256)"(
    payment: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRecipient(
    recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setRecipient(address)"(
    recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    agreementForms(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "agreementForms(address,bytes32)"(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    agreements(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [string] & { signatory: string },
        [string] & { signatory: string },
        boolean,
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        [string, string] & { multiaddressReference: string; digest: string }
      ] & {
        fromSigner: [string] & { signatory: string };
        toSigner: [string] & { signatory: string };
        escrowed: boolean;
        validUntil: BigNumber;
        agreementForm: string;
        agreementFormTemplateId: string;
        status: BigNumber;
        created_at: BigNumber;
        updated_at: BigNumber;
        file: [string, string] & {
          multiaddressReference: string;
          digest: string;
        };
      }
    >;

    "agreements(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [string] & { signatory: string },
        [string] & { signatory: string },
        boolean,
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        [string, string] & { multiaddressReference: string; digest: string }
      ] & {
        fromSigner: [string] & { signatory: string };
        toSigner: [string] & { signatory: string };
        escrowed: boolean;
        validUntil: BigNumber;
        agreementForm: string;
        agreementFormTemplateId: string;
        status: BigNumber;
        created_at: BigNumber;
        updated_at: BigNumber;
        file: [string, string] & {
          multiaddressReference: string;
          digest: string;
        };
      }
    >;

    counterPartiesReject(
      token: string,
      agreementId: BigNumberish,
      validUntil: BigNumberish,
      multiaddrReference: string,
      agreementFormTemplateId: BytesLike,
      agreementForm: BytesLike,
      digest: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "counterPartiesReject(address,uint256,uint256,string,bytes32,bytes,bytes)"(
      token: string,
      agreementId: BigNumberish,
      validUntil: BigNumberish,
      multiaddrReference: string,
      agreementFormTemplateId: BytesLike,
      agreementForm: BytesLike,
      digest: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    counterPartiesSign(
      token: string,
      agreementId: BigNumberish,
      validUntil: BigNumberish,
      multiaddrReference: string,
      agreementFormTemplateId: BytesLike,
      agreementForm: BytesLike,
      digest: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "counterPartiesSign(address,uint256,uint256,string,bytes32,bytes,bytes)"(
      token: string,
      agreementId: BigNumberish,
      validUntil: BigNumberish,
      multiaddrReference: string,
      agreementFormTemplateId: BytesLike,
      agreementForm: BytesLike,
      digest: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    get(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [string] & { signatory: string },
        [string] & { signatory: string },
        boolean,
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        [string, string] & { multiaddressReference: string; digest: string }
      ] & {
        fromSigner: [string] & { signatory: string };
        toSigner: [string] & { signatory: string };
        escrowed: boolean;
        validUntil: BigNumber;
        agreementForm: string;
        agreementFormTemplateId: string;
        status: BigNumber;
        created_at: BigNumber;
        updated_at: BigNumber;
        file: [string, string] & {
          multiaddressReference: string;
          digest: string;
        };
      }
    >;

    "get(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [string] & { signatory: string },
        [string] & { signatory: string },
        boolean,
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        [string, string] & { multiaddressReference: string; digest: string }
      ] & {
        fromSigner: [string] & { signatory: string };
        toSigner: [string] & { signatory: string };
        escrowed: boolean;
        validUntil: BigNumber;
        agreementForm: string;
        agreementFormTemplateId: string;
        status: BigNumber;
        created_at: BigNumber;
        updated_at: BigNumber;
        file: [string, string] & {
          multiaddressReference: string;
          digest: string;
        };
      }
    >;

    getBalanceToken(
      token: string,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getBalanceToken(address,address)"(
      token: string,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFormById(
      agreementId: BigNumberish,
      isCounterparty: boolean,
      formId: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "getFormById(uint256,bool,bytes32)"(
      agreementId: BigNumberish,
      isCounterparty: boolean,
      formId: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getPayment(overrides?: CallOverrides): Promise<BigNumber>;

    "getPayment()"(overrides?: CallOverrides): Promise<BigNumber>;

    getRecipient(overrides?: CallOverrides): Promise<string>;

    "getRecipient()"(overrides?: CallOverrides): Promise<string>;

    has(id: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    "has(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    partyCreate(
      token: string,
      validUntil: BigNumberish,
      counterparty: string,
      multiaddrReference: string,
      agreementFormTemplateId: BytesLike,
      agreementForm: BytesLike,
      digest: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "partyCreate(address,uint256,address,string,bytes32,bytes,bytes)"(
      token: string,
      validUntil: BigNumberish,
      counterparty: string,
      multiaddrReference: string,
      agreementFormTemplateId: BytesLike,
      agreementForm: BytesLike,
      digest: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    setAgreementTemplate(
      id: BytesLike,
      content: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "setAgreementTemplate(bytes32,bytes)"(
      id: BytesLike,
      content: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setPayment(
      payment: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "setPayment(uint256)"(
      payment: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setRecipient(
      recipient: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "setRecipient(address)"(
      recipient: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    AgreementEvents(
      id: BigNumberish | null,
      formTemplateId: null,
      partySource: string | null,
      partyDestination: string | null,
      agreementStoredReference: null,
      status: null
    ): TypedEventFilter<
      [BigNumber, string, string, string, string, BigNumber],
      {
        id: BigNumber;
        formTemplateId: string;
        partySource: string;
        partyDestination: string;
        agreementStoredReference: string;
        status: BigNumber;
      }
    >;

    ChangePaymentEvents(
      oldPayment: null,
      newPayment: null,
      owner: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, string],
      { oldPayment: BigNumber; newPayment: BigNumber; owner: string }
    >;

    ChangeRecipientEvents(
      oldRecipient: null,
      newRecipient: null,
      owner: null
    ): TypedEventFilter<
      [string, string, string],
      { oldRecipient: string; newRecipient: string; owner: string }
    >;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    PaymentEvents(
      payments: null,
      sender: null,
      token: null
    ): TypedEventFilter<
      [BigNumber, string, string],
      { payments: BigNumber; sender: string; token: string }
    >;
  };

  estimateGas: {
    agreementForms(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "agreementForms(address,bytes32)"(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    agreements(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "agreements(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    counterPartiesReject(
      token: string,
      agreementId: BigNumberish,
      validUntil: BigNumberish,
      multiaddrReference: string,
      agreementFormTemplateId: BytesLike,
      agreementForm: BytesLike,
      digest: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "counterPartiesReject(address,uint256,uint256,string,bytes32,bytes,bytes)"(
      token: string,
      agreementId: BigNumberish,
      validUntil: BigNumberish,
      multiaddrReference: string,
      agreementFormTemplateId: BytesLike,
      agreementForm: BytesLike,
      digest: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    counterPartiesSign(
      token: string,
      agreementId: BigNumberish,
      validUntil: BigNumberish,
      multiaddrReference: string,
      agreementFormTemplateId: BytesLike,
      agreementForm: BytesLike,
      digest: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "counterPartiesSign(address,uint256,uint256,string,bytes32,bytes,bytes)"(
      token: string,
      agreementId: BigNumberish,
      validUntil: BigNumberish,
      multiaddrReference: string,
      agreementFormTemplateId: BytesLike,
      agreementForm: BytesLike,
      digest: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    get(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "get(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBalanceToken(
      token: string,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getBalanceToken(address,address)"(
      token: string,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFormById(
      agreementId: BigNumberish,
      isCounterparty: boolean,
      formId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getFormById(uint256,bool,bytes32)"(
      agreementId: BigNumberish,
      isCounterparty: boolean,
      formId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPayment(overrides?: CallOverrides): Promise<BigNumber>;

    "getPayment()"(overrides?: CallOverrides): Promise<BigNumber>;

    getRecipient(overrides?: CallOverrides): Promise<BigNumber>;

    "getRecipient()"(overrides?: CallOverrides): Promise<BigNumber>;

    has(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "has(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    partyCreate(
      token: string,
      validUntil: BigNumberish,
      counterparty: string,
      multiaddrReference: string,
      agreementFormTemplateId: BytesLike,
      agreementForm: BytesLike,
      digest: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "partyCreate(address,uint256,address,string,bytes32,bytes,bytes)"(
      token: string,
      validUntil: BigNumberish,
      counterparty: string,
      multiaddrReference: string,
      agreementFormTemplateId: BytesLike,
      agreementForm: BytesLike,
      digest: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAgreementTemplate(
      id: BytesLike,
      content: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setAgreementTemplate(bytes32,bytes)"(
      id: BytesLike,
      content: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPayment(
      payment: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setPayment(uint256)"(
      payment: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRecipient(
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setRecipient(address)"(
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    agreementForms(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "agreementForms(address,bytes32)"(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    agreements(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "agreements(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    counterPartiesReject(
      token: string,
      agreementId: BigNumberish,
      validUntil: BigNumberish,
      multiaddrReference: string,
      agreementFormTemplateId: BytesLike,
      agreementForm: BytesLike,
      digest: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "counterPartiesReject(address,uint256,uint256,string,bytes32,bytes,bytes)"(
      token: string,
      agreementId: BigNumberish,
      validUntil: BigNumberish,
      multiaddrReference: string,
      agreementFormTemplateId: BytesLike,
      agreementForm: BytesLike,
      digest: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    counterPartiesSign(
      token: string,
      agreementId: BigNumberish,
      validUntil: BigNumberish,
      multiaddrReference: string,
      agreementFormTemplateId: BytesLike,
      agreementForm: BytesLike,
      digest: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "counterPartiesSign(address,uint256,uint256,string,bytes32,bytes,bytes)"(
      token: string,
      agreementId: BigNumberish,
      validUntil: BigNumberish,
      multiaddrReference: string,
      agreementFormTemplateId: BytesLike,
      agreementForm: BytesLike,
      digest: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    get(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "get(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBalanceToken(
      token: string,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getBalanceToken(address,address)"(
      token: string,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFormById(
      agreementId: BigNumberish,
      isCounterparty: boolean,
      formId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getFormById(uint256,bool,bytes32)"(
      agreementId: BigNumberish,
      isCounterparty: boolean,
      formId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPayment(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getPayment()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRecipient(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getRecipient()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    has(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "has(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    partyCreate(
      token: string,
      validUntil: BigNumberish,
      counterparty: string,
      multiaddrReference: string,
      agreementFormTemplateId: BytesLike,
      agreementForm: BytesLike,
      digest: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "partyCreate(address,uint256,address,string,bytes32,bytes,bytes)"(
      token: string,
      validUntil: BigNumberish,
      counterparty: string,
      multiaddrReference: string,
      agreementFormTemplateId: BytesLike,
      agreementForm: BytesLike,
      digest: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAgreementTemplate(
      id: BytesLike,
      content: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setAgreementTemplate(bytes32,bytes)"(
      id: BytesLike,
      content: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPayment(
      payment: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setPayment(uint256)"(
      payment: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRecipient(
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setRecipient(address)"(
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
