/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface WorkflowRegistryInterface extends ethers.utils.Interface {
  functions: {
    "agreements(uint256)": FunctionFragment;
    "createWorkflow(address,address,uint256,string,bytes32,bytes,uint256,uint256,uint256,bytes)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "agreements",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createWorkflow",
    values: [
      string,
      string,
      BigNumberish,
      string,
      BytesLike,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;

  decodeFunctionResult(functionFragment: "agreements", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createWorkflow",
    data: BytesLike
  ): Result;

  events: {
    "AgreementClosed(uint256)": EventFragment;
    "AgreementCreated(uint256)": EventFragment;
    "AgreementDisputed(uint256)": EventFragment;
    "AgreementModified(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AgreementClosed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AgreementCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AgreementDisputed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AgreementModified"): EventFragment;
}

export class WorkflowRegistry extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: WorkflowRegistryInterface;

  functions: {
    agreements(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [string] & { signatory: string },
        [string] & { signatory: string },
        boolean,
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        [string, string] & { multiaddressReference: string; digest: string }
      ] & {
        fromSigner: [string] & { signatory: string };
        toSigner: [string] & { signatory: string };
        escrowed: boolean;
        validUntil: BigNumber;
        agreementForm: string;
        agreementFormTemplateId: string;
        status: BigNumber;
        created_at: BigNumber;
        updated_at: BigNumber;
        file: [string, string] & {
          multiaddressReference: string;
          digest: string;
        };
      }
    >;

    "agreements(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [string] & { signatory: string },
        [string] & { signatory: string },
        boolean,
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        [string, string] & { multiaddressReference: string; digest: string }
      ] & {
        fromSigner: [string] & { signatory: string };
        toSigner: [string] & { signatory: string };
        escrowed: boolean;
        validUntil: BigNumber;
        agreementForm: string;
        agreementFormTemplateId: string;
        status: BigNumber;
        created_at: BigNumber;
        updated_at: BigNumber;
        file: [string, string] & {
          multiaddressReference: string;
          digest: string;
        };
      }
    >;

    createWorkflow(
      party: string,
      counterparty: string,
      validUntil: BigNumberish,
      multiaddrReference: string,
      agreementFormTemplateId: BytesLike,
      agreementForm: BytesLike,
      status: BigNumberish,
      created_at: BigNumberish,
      updated_at: BigNumberish,
      digest: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "createWorkflow(address,address,uint256,string,bytes32,bytes,uint256,uint256,uint256,bytes)"(
      party: string,
      counterparty: string,
      validUntil: BigNumberish,
      multiaddrReference: string,
      agreementFormTemplateId: BytesLike,
      agreementForm: BytesLike,
      status: BigNumberish,
      created_at: BigNumberish,
      updated_at: BigNumberish,
      digest: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  agreements(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      [string] & { signatory: string },
      [string] & { signatory: string },
      boolean,
      BigNumber,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      [string, string] & { multiaddressReference: string; digest: string }
    ] & {
      fromSigner: [string] & { signatory: string };
      toSigner: [string] & { signatory: string };
      escrowed: boolean;
      validUntil: BigNumber;
      agreementForm: string;
      agreementFormTemplateId: string;
      status: BigNumber;
      created_at: BigNumber;
      updated_at: BigNumber;
      file: [string, string] & {
        multiaddressReference: string;
        digest: string;
      };
    }
  >;

  "agreements(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      [string] & { signatory: string },
      [string] & { signatory: string },
      boolean,
      BigNumber,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      [string, string] & { multiaddressReference: string; digest: string }
    ] & {
      fromSigner: [string] & { signatory: string };
      toSigner: [string] & { signatory: string };
      escrowed: boolean;
      validUntil: BigNumber;
      agreementForm: string;
      agreementFormTemplateId: string;
      status: BigNumber;
      created_at: BigNumber;
      updated_at: BigNumber;
      file: [string, string] & {
        multiaddressReference: string;
        digest: string;
      };
    }
  >;

  createWorkflow(
    party: string,
    counterparty: string,
    validUntil: BigNumberish,
    multiaddrReference: string,
    agreementFormTemplateId: BytesLike,
    agreementForm: BytesLike,
    status: BigNumberish,
    created_at: BigNumberish,
    updated_at: BigNumberish,
    digest: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "createWorkflow(address,address,uint256,string,bytes32,bytes,uint256,uint256,uint256,bytes)"(
    party: string,
    counterparty: string,
    validUntil: BigNumberish,
    multiaddrReference: string,
    agreementFormTemplateId: BytesLike,
    agreementForm: BytesLike,
    status: BigNumberish,
    created_at: BigNumberish,
    updated_at: BigNumberish,
    digest: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    agreements(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [string] & { signatory: string },
        [string] & { signatory: string },
        boolean,
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        [string, string] & { multiaddressReference: string; digest: string }
      ] & {
        fromSigner: [string] & { signatory: string };
        toSigner: [string] & { signatory: string };
        escrowed: boolean;
        validUntil: BigNumber;
        agreementForm: string;
        agreementFormTemplateId: string;
        status: BigNumber;
        created_at: BigNumber;
        updated_at: BigNumber;
        file: [string, string] & {
          multiaddressReference: string;
          digest: string;
        };
      }
    >;

    "agreements(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [string] & { signatory: string },
        [string] & { signatory: string },
        boolean,
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        [string, string] & { multiaddressReference: string; digest: string }
      ] & {
        fromSigner: [string] & { signatory: string };
        toSigner: [string] & { signatory: string };
        escrowed: boolean;
        validUntil: BigNumber;
        agreementForm: string;
        agreementFormTemplateId: string;
        status: BigNumber;
        created_at: BigNumber;
        updated_at: BigNumber;
        file: [string, string] & {
          multiaddressReference: string;
          digest: string;
        };
      }
    >;

    createWorkflow(
      party: string,
      counterparty: string,
      validUntil: BigNumberish,
      multiaddrReference: string,
      agreementFormTemplateId: BytesLike,
      agreementForm: BytesLike,
      status: BigNumberish,
      created_at: BigNumberish,
      updated_at: BigNumberish,
      digest: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "createWorkflow(address,address,uint256,string,bytes32,bytes,uint256,uint256,uint256,bytes)"(
      party: string,
      counterparty: string,
      validUntil: BigNumberish,
      multiaddrReference: string,
      agreementFormTemplateId: BytesLike,
      agreementForm: BytesLike,
      status: BigNumberish,
      created_at: BigNumberish,
      updated_at: BigNumberish,
      digest: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    AgreementClosed(
      id: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { id: BigNumber }>;

    AgreementCreated(
      id: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { id: BigNumber }>;

    AgreementDisputed(
      id: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { id: BigNumber }>;

    AgreementModified(
      id: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { id: BigNumber }>;
  };

  estimateGas: {
    agreements(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "agreements(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createWorkflow(
      party: string,
      counterparty: string,
      validUntil: BigNumberish,
      multiaddrReference: string,
      agreementFormTemplateId: BytesLike,
      agreementForm: BytesLike,
      status: BigNumberish,
      created_at: BigNumberish,
      updated_at: BigNumberish,
      digest: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "createWorkflow(address,address,uint256,string,bytes32,bytes,uint256,uint256,uint256,bytes)"(
      party: string,
      counterparty: string,
      validUntil: BigNumberish,
      multiaddrReference: string,
      agreementFormTemplateId: BytesLike,
      agreementForm: BytesLike,
      status: BigNumberish,
      created_at: BigNumberish,
      updated_at: BigNumberish,
      digest: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    agreements(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "agreements(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createWorkflow(
      party: string,
      counterparty: string,
      validUntil: BigNumberish,
      multiaddrReference: string,
      agreementFormTemplateId: BytesLike,
      agreementForm: BytesLike,
      status: BigNumberish,
      created_at: BigNumberish,
      updated_at: BigNumberish,
      digest: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "createWorkflow(address,address,uint256,string,bytes32,bytes,uint256,uint256,uint256,bytes)"(
      party: string,
      counterparty: string,
      validUntil: BigNumberish,
      multiaddrReference: string,
      agreementFormTemplateId: BytesLike,
      agreementForm: BytesLike,
      status: BigNumberish,
      created_at: BigNumberish,
      updated_at: BigNumberish,
      digest: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
