/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface AgreementModelsInterface extends ethers.utils.Interface {
  functions: {};

  events: {
    "AgreementEvents(uint256,bytes32,address,address,string,uint256)": EventFragment;
    "ChangePaymentEvents(uint256,uint256,address)": EventFragment;
    "ChangeRecipientEvents(address,address,address)": EventFragment;
    "PaymentEvents(uint256,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AgreementEvents"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangePaymentEvents"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangeRecipientEvents"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PaymentEvents"): EventFragment;
}

export class AgreementModels extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: AgreementModelsInterface;

  functions: {};

  callStatic: {};

  filters: {
    AgreementEvents(
      id: BigNumberish | null,
      formTemplateId: null,
      partySource: string | null,
      partyDestination: string | null,
      agreementStoredReference: null,
      status: null
    ): TypedEventFilter<
      [BigNumber, string, string, string, string, BigNumber],
      {
        id: BigNumber;
        formTemplateId: string;
        partySource: string;
        partyDestination: string;
        agreementStoredReference: string;
        status: BigNumber;
      }
    >;

    ChangePaymentEvents(
      oldPayment: null,
      newPayment: null,
      owner: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, string],
      { oldPayment: BigNumber; newPayment: BigNumber; owner: string }
    >;

    ChangeRecipientEvents(
      oldRecipient: null,
      newRecipient: null,
      owner: null
    ): TypedEventFilter<
      [string, string, string],
      { oldRecipient: string; newRecipient: string; owner: string }
    >;

    PaymentEvents(
      payments: null,
      sender: null,
      token: null
    ): TypedEventFilter<
      [BigNumber, string, string],
      { payments: BigNumber; sender: string; token: string }
    >;
  };

  estimateGas: {};

  populateTransaction: {};
}
